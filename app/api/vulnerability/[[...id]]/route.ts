import { NextRequest, NextResponse } from 'next/server';

import { Prisma } from '@prisma/prismadb';
import {
  getVulnerabilityById,
  getAllVulnerabilities,
  deleteVulnerabilityById,
  updateVulnerability,
  createVulnerability,
} from '../handlers';
import { vulnerabilities } from '@prisma/client';

interface VulnerabilityParamsGET {
  params: {
    id: string;
  };
}

export type SingleVulnerability = Prisma.PromiseReturnType<typeof getVulnerabilityById>;

export async function GET(request: NextRequest, { params }: VulnerabilityParamsGET) {
  const vulnerabilities = !params.id
    ? await getVulnerabilitiesWithFiltering(request)
    : await getVulnerabilityById(+params.id);

  return NextResponse.json(vulnerabilities);
}

export async function POST(request: NextRequest) {
  const vulnerabilities = await createVulnerability((await request.json()) as vulnerabilities);

  return NextResponse.json(vulnerabilities, {
    status: 201,
  });
}

export async function PUT(request: NextRequest, { params }: VulnerabilityParamsGET) {
  const vulnerabilities = await updateVulnerability(+params.id, (await request.json()) as vulnerabilities);

  return NextResponse.json(vulnerabilities);
}

export async function DELETE(request: NextRequest, { params }: VulnerabilityParamsGET) {
  const location = await deleteVulnerabilityById(+params.id);

  return NextResponse.json(location);
}

export type VulnerabilityFilter = 'hardware' | 'location';

async function getVulnerabilitiesWithFiltering(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const hardwareId = searchParams.get('hardware');
  const locationId = searchParams.get('location');

  return await getAllVulnerabilities(hardwareId, locationId);
}
