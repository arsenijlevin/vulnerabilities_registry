import { NextResponse } from 'next/server';

import { Prisma } from '@prisma/prismadb';
import { getVulnTypeById, getVulnTypes, deleteVulnTypeById, updateVulnType, createVulnType } from '../handlers';
import { vuln_types_list } from '@prisma/client';

interface VulnerabilityParamsGET {
  params: {
    id: string;
  };
}

export type SingleVulnerability = Prisma.PromiseReturnType<typeof getVulnTypeById>;

export async function GET(request: Request, { params }: VulnerabilityParamsGET) {
  const vuln_types_list = !params.id ? await getVulnTypes() : await getVulnTypeById(+params.id);

  return NextResponse.json(vuln_types_list);
}

export async function POST(request: Request) {
  const vuln_types_list = await createVulnType((await request.json()) as vuln_types_list);

  return NextResponse.json(vuln_types_list, {
    status: 201,
  });
}

export async function PUT(request: Request, { params }: VulnerabilityParamsGET) {
  const vuln_types_list = await updateVulnType(+params.id, (await request.json()) as vuln_types_list);

  return NextResponse.json(vuln_types_list);
}

export async function DELETE(request: Request, { params }: VulnerabilityParamsGET) {
  const location = await deleteVulnTypeById(+params.id);

  return NextResponse.json(location);
}
