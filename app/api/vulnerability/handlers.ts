import { vulnerabilities, vulnerabilitiesPayload } from '@prisma/client';
import { prisma } from '@prisma/prismadb';

export const createVulnerability = async (data: vulnerabilities) => {
  const vulnerabilities = await prisma.vulnerabilities.create({
    data,
  });

  return vulnerabilities;
};

export const updateVulnerability = async (id: number, data: vulnerabilities) => {
  const vulnerabilities = await prisma.vulnerabilities.update({
    where: {
      id,
    },
    data,
  });

  return vulnerabilities;
};

export const getVulnerabilityById = async (id: number) => {
  const vulnerabilities = await prisma.vulnerabilities.findUnique({
    where: {
      id: id,
    },
  });

  return vulnerabilities;
};

export const getAllVulnerabilities = async (hardwareId?: string | null, locationId?: string | null) => {
  const hardwareIdClause = {
    vuln_hardware: {
      some: {
        hardware_id: parseInt(hardwareId ?? ''),
      },
    },
  };
  const hardwareClause = {
    vuln_hardware: {
      some: {
        hardware: {
          hardware_location: {
            some: {
              location_id: parseInt(locationId ?? ''),
            },
          },
        },
      },
    },
  };

  const allClause = {
    vuln_hardware: {
      some: {
        hardware_id: parseInt(hardwareId ?? ''),
        hardware: {
          hardware_location: {
            some: {
              location_id: parseInt(locationId ?? ''),
            },
          },
        },
      },
    },
  };

  const whereClause =
    hardwareId && locationId ? allClause : hardwareId ? hardwareIdClause : locationId ? hardwareClause : {};

  const vulnerabilities = await prisma.vulnerabilities.findMany({
    where: whereClause,
    include: {
      vuln_hardware: {
        select: {
          hardware: {
            select: {
              hardware_location: {
                select: {
                  hardware: true,
                  locations: true,
                },
              },
            },
          },
        },
      },
      vuln_types: {
        include: {
          vuln_types_list: {
            select: {
              title: true,
            },
          },
        },
      },
    },
  });

  return vulnerabilities;
};

export const deleteVulnerabilityById = async (id: number) => {
  const vulnerabilities = await prisma.vulnerabilities.delete({
    where: {
      id: id,
    },
  });

  return vulnerabilities;
};
