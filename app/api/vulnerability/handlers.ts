import { Vulnerability } from '@/dto/VulnerabilityDTO';
import { getVulnerabilityByIdInclude } from './includes';
import { Prisma } from '@prisma/client';
import { prisma } from '@prisma/prismadb';

export const vulnerabilityToCreateArgs = (
  vulnerabilityData: Vulnerability,
): Prisma.vulnerabilitiesCreateArgs['data'] => {
  return {
    ...vulnerabilityData,
    vuln_hardware: {
      createMany: {
        data: vulnerabilityData.vuln_hardware.map((vuln_hardware) => ({
          hardware_id: vuln_hardware.hardware.id,
        })),
      },
    },
    vuln_types: {
      createMany: {
        data: vulnerabilityData.vuln_types.map((vuln_type) => ({
          type_id: vuln_type.vuln_types_list.id,
        })),
      },
    },
  };
};

export const vulnerabilityToUpdateArgs = (
  vulnerabilityData: Vulnerability,
): Prisma.vulnerabilitiesUpdateArgs['data'] => {
  return {
    ...vulnerabilityData,
    vuln_hardware: {
      set: vulnerabilityData.vuln_hardware.map((vuln_hardware) => ({
        vulnerability_id_hardware_id: {
          vulnerability_id: vulnerabilityData.id,
          hardware_id: vuln_hardware.hardware.id,
        },
      })),
    },
    vuln_types: {
      set: vulnerabilityData.vuln_types.map((vuln_type) => ({
        vuln_id_type_id: {
          vuln_id: vulnerabilityData.id,
          type_id: vuln_type.vuln_types_list.id,
        },
      })),
    },
  };
};

export const createVulnerability = async (data: Vulnerability) => {
  const vulnerabilities = await prisma.vulnerabilities.create({
    data: vulnerabilityToCreateArgs(data),
    include: getVulnerabilityByIdInclude,
  });

  return vulnerabilities;
};

export const updateVulnerability = async (id: number, vulnerabilityData: Vulnerability): Promise<Vulnerability> => {
  const data: Prisma.vulnerabilitiesUpdateArgs['data'] = vulnerabilityToUpdateArgs(vulnerabilityData);

  const vulnerability = await prisma.vulnerabilities.update({
    where: {
      id,
    },
    data: {
      ...data,
    },
    include: getVulnerabilityByIdInclude,
  });

  return vulnerability;
};

export const getVulnerabilityById = async (id: number) => {
  const vulnerability = await prisma.vulnerabilities.findUnique({
    where: {
      id: id,
    },
    include: getVulnerabilityByIdInclude,
  });

  return vulnerability;
};

export const getAllVulnerabilities = async (
  hardwareId?: string | null,
  locationId?: string | null,
): Promise<Vulnerability[]> => {
  const hardwareIdClause = {
    vuln_hardware: {
      some: {
        hardware_id: parseInt(hardwareId ?? ''),
      },
    },
  };
  const hardwareClause = {
    vuln_hardware: {
      some: {
        hardware: {
          hardware_location: {
            some: {
              location_id: parseInt(locationId ?? ''),
            },
          },
        },
      },
    },
  };

  const allClause = {
    vuln_hardware: {
      some: {
        hardware_id: parseInt(hardwareId ?? ''),
        hardware: {
          hardware_location: {
            some: {
              location_id: parseInt(locationId ?? ''),
            },
          },
        },
      },
    },
  };

  const whereClause =
    hardwareId && locationId ? allClause : hardwareId ? hardwareIdClause : locationId ? hardwareClause : {};

  const vulnerabilities = await prisma.vulnerabilities.findMany({
    where: whereClause,
    include: getVulnerabilityByIdInclude,
  });

  return vulnerabilities;
};

export const deleteVulnerabilityById = async (id: number): Promise<Vulnerability> => {
  const vulnerability = await prisma.vulnerabilities.delete({
    where: {
      id: id,
    },
    include: getVulnerabilityByIdInclude,
  });

  return vulnerability;
};
